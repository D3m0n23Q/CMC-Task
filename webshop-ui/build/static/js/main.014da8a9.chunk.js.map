{"version":3,"sources":["Components/Product.jsx","Components/PurchasableProduct.jsx","Components/PurchasableProductsList.jsx","Components/ProductsScreen.jsx","Components/NavBar.jsx","Components/CheckoutProductList.jsx","Components/CheckoutScreen.jsx","Components/ThankYouScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["Product","props","product","this","name","value","Component","PurchasableProduct","addProductToCart","onClick","addToCart","bind","PurchasableProductList","products","map","key","id","ProductsScreen","checkout","state","fetch","then","response","text","data","setState","json","NavBar","navigateHome","CheckoutProductList","count","CheckoutScreen","createOrder","ThankYouScreen","App","_Product","find","elem","push","_Products","sort","a","b","ReactDOM","render","document","getElementById","alert","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.014da8a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Product extends Component{    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const product = this.props.product;\r\n        return (\r\n                <span>{product.name} {product.value} </span>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Product } from './Product';\r\n\r\nexport class PurchasableProduct extends Component{    \r\n    constructor(props) {\r\n        super(props);\r\n        this.addProductToCart = this.props.addProductToCart;\r\n    }\r\n    render() {\r\n        const product = this.props.product;\r\n        return (\r\n                <div>\r\n                    <Product product={product}/>\r\n                    <button onClick={this.addToCart.bind(this, product)}>Add to cart</button>\r\n                </div>\r\n        )\r\n    }\r\n\r\n    addToCart(product) {\r\n        this.addProductToCart(product);\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { PurchasableProduct } from './PurchasableProduct'\r\n\r\nexport class PurchasableProductList extends Component {\r\n    render() {\r\n        return this.props.products.map(product => \r\n            <PurchasableProduct key={product.id} product={product} addProductToCart={this.props.addProductToCart}/>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { NavBar } from './NavBar';\r\nimport { PurchasableProductList } from './PurchasableProductsList';\r\n\r\nexport class ProductsScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.checkout = this.props.checkout;\r\n        this.addProductToCart = this.props.addProductToCart;\r\n        this.state = { products: [] };\r\n\r\n        fetch('/api/Products')\r\n          .then(response => response.text())\r\n          .then(data => { \r\n              this.setState({ products: data }); \r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar checkout={this.checkout}/>\r\n                <PurchasableProductList products={this.state.products} addProductToCart={this.addProductToCart}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    dojson(response) {\r\n        var r = response.json();\r\n        return r;\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { ProductsScreen } from './ProductsScreen';\r\n\r\nexport class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.props.navigateHome}>Home</button>\r\n                <button onClick={this.props.checkout}>Checkout</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Product } from './Product'\r\n\r\nexport class CheckoutProductList extends Component {\r\n    render() {\r\n        return this.props.products.map(product => \r\n            <div key={product.id}>\r\n                <Product product={product}/> {product.count}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { NavBar } from './NavBar';\r\nimport { CheckoutProductList } from './CheckoutProductList';\r\n\r\n\r\nexport class CheckoutScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar navigateHome={this.props.navigateHome}/>\r\n                <h1>Checkout page</h1>\r\n                <CheckoutProductList products={this.props.products}/>\r\n                <button onClick={this.createOrder.bind(this)}>Purchase</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createOrder() {\r\n        this.props.createOrder();\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { NavBar } from './NavBar'\r\n\r\nexport class ThankYouScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar checkout={this.props.checkout} navigateHome={this.props.navigateHome}/>\r\n                <h1>Thank you!</h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {CheckoutScreen} from './Components/CheckoutScreen'\nimport {ProductsScreen} from './Components/ProductsScreen'\nimport { ThankYouScreen } from './Components/ThankYouScreen';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.products = [];\n  }\n\n  render () {\n    return <ProductsScreen addProductToCart={this.addProductToCart.bind(this)} checkout={this.checkout.bind(this)}/>\n  }\n\n  addProductToCart(product) {\n    product.count = 1;\n    var _Product = this.products.find((elem) => elem.id == product.id)\n    \n    if(_Product) _Product.count += 1;\n    else this.products.push(product);\n  }\n  \n  checkout() {\n    var _Products = this.products.sort((a,b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0)\n    ReactDOM.render(<CheckoutScreen products={_Products} createOrder={this.createOrder.bind(this)} navigateHome={this.navigateHome.bind(this)}/>, document.getElementById('root'));\n  }\n\n  createOrder() {\n    alert('Success! Your order has been submitted.');\n    ReactDOM.render(<ThankYouScreen navigateHome={this.navigateHome.bind(this)}/>, document.getElementById('root'));\n    this.products = [];\n  }\n  \n  navigateHome() {\n      ReactDOM.render(<ProductsScreen addProductToCart={this.addProductToCart.bind(this)} checkout={this.checkout.bind(this)}/>, document.getElementById('root'));\n  }\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}